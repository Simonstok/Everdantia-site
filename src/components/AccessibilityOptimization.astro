---
// Accessibility optimization component for better user experience and SEO
---

<!-- Enhanced accessibility meta tags -->
<meta name="color-scheme" content="light" />
<meta name="theme-color" content="#8bab5d" media="(prefers-color-scheme: light)" />

<!-- Enhanced focus and keyboard navigation -->
<style>
  /* Enhanced focus indicators for accessibility */
  *:focus {
    outline: 2px solid #8bab5d;
    outline-offset: 2px;
  }

  /* High contrast mode support */
  @media (prefers-contrast: high) {
    :root {
      --text-color: #000;
      --bg-color: #fff;
      --accent-color: #006600;
    }
  }

  /* Reduced motion for users who prefer it */
  @media (prefers-reduced-motion: reduce) {
    *, *::before, *::after {
      animation-duration: 0.01ms !important;
      animation-iteration-count: 1 !important;
      transition-duration: 0.01ms !important;
    }
  }

  /* Print styles for better accessibility */
  @media print {
    nav, .mobile-menu, footer {
      display: none !important;
    }
    body {
      background: white !important;
      color: black !important;
    }
    a {
      color: black !important;
      text-decoration: underline !important;
    }
  }

  /* Screen reader only content */
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }

  /* Skip link for keyboard navigation */
  .skip-link {
    position: absolute;
    top: -40px;
    left: 6px;
    background: #8bab5d;
    color: white;
    padding: 8px;
    text-decoration: none;
    z-index: 1000;
    border-radius: 4px;
  }

  .skip-link:focus {
    top: 6px;
  }
</style>

<!-- Skip navigation link for accessibility -->
<a href="#main-content" class="skip-link">Skip to main content</a>

<!-- Enhanced keyboard navigation script -->
<script>
  // Enhanced keyboard navigation
  document.addEventListener('DOMContentLoaded', () => {
    // Add keyboard navigation to mobile menu
    const mobileToggle = document.querySelector('#mobileMenuToggle');
    const mobileMenu = document.querySelector('#mobileMenu');
    
    if (mobileToggle && mobileMenu) {
      mobileToggle.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          mobileToggle.click();
        }
      });

      // Trap focus in mobile menu when open
      mobileMenu.addEventListener('keydown', (e) => {
        if (e.key === 'Tab') {
          const focusableElements = mobileMenu.querySelectorAll(
            'a[href], button, [tabindex]:not([tabindex="-1"])'
          );
          const firstElement = focusableElements[0];
          const lastElement = focusableElements[focusableElements.length - 1];

          if (e.shiftKey && document.activeElement === firstElement) {
            e.preventDefault();
            lastElement.focus();
          } else if (!e.shiftKey && document.activeElement === lastElement) {
            e.preventDefault();
            firstElement.focus();
          }
        }
      });
    }

    // Add focus indicators to all interactive elements
    const interactiveElements = document.querySelectorAll(
      'a, button, input, select, textarea, [tabindex]:not([tabindex="-1"])'
    );
    
    interactiveElements.forEach(element => {
      element.addEventListener('focus', () => {
        element.classList.add('focused');
      });
      
      element.addEventListener('blur', () => {
        element.classList.remove('focused');
      });
    });

    // Announce page changes for screen readers
    const announcePageChange = (message) => {
      const announcement = document.createElement('div');
      announcement.setAttribute('aria-live', 'polite');
      announcement.setAttribute('aria-atomic', 'true');
      announcement.className = 'sr-only';
      announcement.textContent = message;
      document.body.appendChild(announcement);
      
      setTimeout(() => {
        document.body.removeChild(announcement);
      }, 1000);
    };

    // Announce when mobile menu opens/closes
    if (mobileToggle && mobileMenu) {
      const observer = new MutationObserver(() => {
        if (mobileMenu.classList.contains('active')) {
          announcePageChange('Navigation menu opened');
        } else {
          announcePageChange('Navigation menu closed');
        }
      });
      
      observer.observe(mobileMenu, { attributes: true, attributeFilter: ['class'] });
    }
  });
</script>
